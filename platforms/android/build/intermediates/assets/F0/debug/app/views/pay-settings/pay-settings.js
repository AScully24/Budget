"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var observablModule = require("data/observable");
var observableArrayModule = require("data/observable-array");
var ObservableArray = observableArrayModule.ObservableArray;
var appSettings = require("application-settings");
//import {Component} from "@angular/core";
//import {DatePicker} from "ui/date-picker";
var page;
var frameModule = require("ui/frame");
var viewModel;
var PayFrequencyEnum;
(function (PayFrequencyEnum) {
    PayFrequencyEnum[PayFrequencyEnum["MONTHLY"] = 0] = "MONTHLY";
    PayFrequencyEnum[PayFrequencyEnum["WEEKLY"] = 1] = "WEEKLY";
})(PayFrequencyEnum || (PayFrequencyEnum = {}));
var userPaySettings = {
    income: appSettings.getNumber("income", 0),
    payFrequency: appSettings.getString("payFrequency", PayFrequencyEnum[PayFrequencyEnum.MONTHLY])
};
var paySettingsVM = observablModule.fromObject(userPaySettings);
var payFrequencyOptions = new ObservableArray();
function pageLoaded(args) {
    page = args.object;
    for (var item in payFrequencyOptions) {
        payFrequencyOptions.pop();
    }
    payFrequencyOptions.push(PayFrequencyEnum[PayFrequencyEnum.MONTHLY]);
    payFrequencyOptions.push(PayFrequencyEnum[PayFrequencyEnum.WEEKLY]);
    paySettingsVM.set("payFrequencyOptions", payFrequencyOptions);
    paySettingsVM.set("payFrequencyIndex", appSettings.getNumber("payFrequencyIndex", 0));
    page.bindingContext = paySettingsVM;
}
exports.pageLoaded = pageLoaded;
//Saves the incomes on change. Does not handle dropdowns.
paySettingsVM.addEventListener(observable_1.Observable.propertyChangeEvent, function (pcd) {
    console.log(pcd.eventName.toString() + " " + pcd.propertyName.toString() + " " + pcd.value.toString());
    if (pcd.propertyName.toString() == "income" && pcd.value !== undefined && pcd.value !== "") {
        appSettings.setNumber("income", parseFloat(pcd.value));
    }
});
function printDate() {
    console.log("Date box has been closed");
}
function showDate() {
    var moduleName = "./date-picker,component";
    page.showModal(moduleName, "Rando context", printDate, false);
}
exports.showDate = showDate;
// Updates the view models for payfrequency.
function payFrequencyChange(args) {
    var newPayFrequency = payFrequencyOptions.getItem(args.newIndex).toString();
    paySettingsVM.set("payFrequency", newPayFrequency);
    // TODO: Make a class that saves an object to the app settings. Saves the bother of having to if statement when a value changes. Can use reflection for this.
    appSettings.setString("payFrequncy", newPayFrequency);
    appSettings.setNumber("payFrequencyIndex", args.newIndex);
}
exports.payFrequencyChange = payFrequencyChange;
function paySettings() {
    var topmost = frameModule.topmost();
    topmost.navigate("views/settings/pay-settings");
}
exports.paySettings = paySettings;
/*
@Component({
    moduleId: module.id,
    templateUrl: "./date-picker.component.xml"
})
export class DatePickerComponent {

    onPickerLoaded(args) {
        let datePicker = <DatePicker>args.object;

        datePicker.year = 1980;
        datePicker.month = 2;
        datePicker.day = 9;
        datePicker.minDate = new Date(1975, 0, 29);
        datePicker.maxDate = new Date(2045, 4, 12);
    }

    onDateChanged(args) {
        console.log("Date changed");
        console.log("New value: " + args.value);
        console.log("Old value: " + args.oldValue);
    }

    onDayChanged(args) {
        console.log("Day changed");
        console.log("New value: " + args.value);
        console.log("Old value: " + args.oldValue);
    }

    onMonthChanged(args) {
        console.log("Month changed");
        console.log("New value: " + args.value);
        console.log("Old value: " + args.oldValue);
    }

    onYearChanged(args) {
        console.log("Year changed");
        console.log("New value: " + args.value);
        console.log("Old value: " + args.oldValue);
    }
}*/ 
//# sourceMappingURL=data:application/json;base64,