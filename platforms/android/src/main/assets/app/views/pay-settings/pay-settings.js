"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var observable_1 = require("tns-core-modules/data/observable");
var observablModule = require("data/observable");
var observableArrayModule = require("data/observable-array");
var ObservableArray = observableArrayModule.ObservableArray;
var appSettings = require("application-settings");
var page;
var paySettingsVM = observablModule.fromObject(userPaySettings);
var payFrequencyOptions = new ObservableArray();
var frameModule = require("ui/frame");
var viewModel;
var PayFrequencyEnum;
(function (PayFrequencyEnum) {
    PayFrequencyEnum[PayFrequencyEnum["MONTHLY"] = 0] = "MONTHLY";
    PayFrequencyEnum[PayFrequencyEnum["WEEKLY"] = 1] = "WEEKLY";
})(PayFrequencyEnum || (PayFrequencyEnum = {}));
var userPaySettings = {
    income: appSettings.getNumber("income", 0),
    payFrequency: appSettings.getString("payFrequency", PayFrequencyEnum[PayFrequencyEnum.MONTHLY])
};
function pageLoaded(args) {
    page = args.object;
    for (var item in payFrequencyOptions) {
        payFrequencyOptions.pop();
    }
    payFrequencyOptions.push(PayFrequencyEnum[PayFrequencyEnum.MONTHLY]);
    payFrequencyOptions.push(PayFrequencyEnum[PayFrequencyEnum.WEEKLY]);
    paySettingsVM.set("payFrequencyOptions", payFrequencyOptions);
    paySettingsVM.set("payFrequencyIndex", appSettings.getNumber("payFrequencyIndex", 0));
    page.bindingContext = paySettingsVM;
}
exports.pageLoaded = pageLoaded;
//Saves the incomes on change. Does not handle dropdowns.
paySettingsVM.addEventListener(observable_1.Observable.propertyChangeEvent, function (pcd) {
    //    console.log(pcd.eventName.toString() + " " + pcd.propertyName.toString() + " " + pcd.value.toString());
    if (pcd.propertyName.toString() == "income" && pcd.value !== undefined && pcd.value !== "") {
        appSettings.setNumber("income", parseFloat(pcd.value));
    }
});
function printDate() {
    console.log("Date box has been closed");
}
function showDate() {
    var modalPageModule = "views/pay-settings/simple-modal";
    var context = "some custom context";
    var fullscreen = true;
    page.showModal(modalPageModule, context, function closeCallback() {
        console.log("Fucking work!!!");
    });
    //    var moduleName = "./date-picker,component"
    //    page.showModal(moduleName, "Rando context", printDate, false);
}
exports.showDate = showDate;
// Updates the view models for payfrequency.
function payFrequencyChange(args) {
    var newPayFrequency = payFrequencyOptions.getItem(args.newIndex).toString();
    paySettingsVM.set("payFrequency", newPayFrequency);
    // TODO: Make a class that saves an object to the app settings. Saves the bother of having to if statement when a value changes. Can use reflection for this.
    appSettings.setString("payFrequncy", newPayFrequency);
    appSettings.setNumber("payFrequencyIndex", args.newIndex);
}
exports.payFrequencyChange = payFrequencyChange;
function paySettings() {
    var topmost = frameModule.topmost();
    topmost.navigate("views/settings/pay-settings");
}
exports.paySettings = paySettings;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGF5LXNldHRpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicGF5LXNldHRpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsK0RBQTRJO0FBRzVJLGlEQUFvRDtBQUNwRCw2REFBZ0U7QUFDaEUsSUFBTyxlQUFlLEdBQUcscUJBQXFCLENBQUMsZUFBZSxDQUFDO0FBRS9ELGtEQUFxRDtBQUVyRCxJQUFJLElBQWdCLENBQUM7QUFDckIsSUFBSSxhQUFhLEdBQWdCLGVBQWUsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDN0UsSUFBSSxtQkFBbUIsR0FBNkIsSUFBSSxlQUFlLEVBQVUsQ0FBQztBQUVsRixJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDdEMsSUFBSSxTQUFxQyxDQUFDO0FBRTFDLElBQUssZ0JBR0o7QUFIRCxXQUFLLGdCQUFnQjtJQUNqQiw2REFBTyxDQUFBO0lBQ1AsMkRBQU0sQ0FBQTtBQUNWLENBQUMsRUFISSxnQkFBZ0IsS0FBaEIsZ0JBQWdCLFFBR3BCO0FBT0QsSUFBSSxlQUFlLEdBQWtCO0lBQ2pDLE1BQU0sRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDMUMsWUFBWSxFQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0NBQ25HLENBQUE7QUFFRCxvQkFBMkIsSUFBK0I7SUFDdEQsSUFBSSxHQUFlLElBQUksQ0FBQyxNQUFNLENBQUM7SUFFL0IsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksbUJBQW1CLENBQUMsQ0FBQyxDQUFDO1FBQ25DLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUVyRSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUVwRSxhQUFhLENBQUMsR0FBRyxDQUFDLHFCQUFxQixFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDOUQsYUFBYSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsRUFBRSxXQUFXLENBQUMsU0FBUyxDQUFDLG1CQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFdEYsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7QUFDeEMsQ0FBQztBQWZELGdDQWVDO0FBRUQseURBQXlEO0FBQ3pELGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyx1QkFBVSxDQUFDLG1CQUFtQixFQUFFLFVBQVMsR0FBdUI7SUFDL0YsNkdBQTZHO0lBQ3pHLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLElBQUksUUFBUSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssU0FBUyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6RixXQUFXLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDM0QsQ0FBQztBQUVMLENBQUMsQ0FBQyxDQUFDO0FBRUg7SUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7QUFDNUMsQ0FBQztBQUVEO0lBQ0ksSUFBSSxlQUFlLEdBQUcsaUNBQWlDLENBQUM7SUFDeEQsSUFBSSxPQUFPLEdBQUcscUJBQXFCLENBQUM7SUFDcEMsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDO0lBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLE9BQU8sRUFBRTtRQUNyQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7SUFDUCxnREFBZ0Q7SUFDaEQsb0VBQW9FO0FBQ3BFLENBQUM7QUFURCw0QkFTQztBQUVELDRDQUE0QztBQUM1Qyw0QkFBbUMsSUFBbUM7SUFDbEUsSUFBSSxlQUFlLEdBQVksbUJBQW1CLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNyRixhQUFhLENBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNuRCw2SkFBNko7SUFDN0osV0FBVyxDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFDdEQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxtQkFBbUIsRUFBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQU5ELGdEQU1DO0FBRUQ7SUFDSSxJQUFJLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEMsT0FBTyxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO0FBQ25ELENBQUM7QUFIRCxrQ0FHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIGZyb21PYmplY3QsIGZyb21PYmplY3RSZWN1cnNpdmUsIFByb3BlcnR5Q2hhbmdlRGF0YSwgRXZlbnREYXRhLCBXcmFwcGVkVmFsdWUgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy9kYXRhL29ic2VydmFibGVcIjtcbmltcG9ydCB7IFNlbGVjdGVkSW5kZXhDaGFuZ2VkRXZlbnREYXRhIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1kcm9wLWRvd25cIjtcblxuaW1wb3J0IG9ic2VydmFibE1vZHVsZSA9IHJlcXVpcmUoXCJkYXRhL29ic2VydmFibGVcIik7XG5pbXBvcnQgb2JzZXJ2YWJsZUFycmF5TW9kdWxlID0gcmVxdWlyZShcImRhdGEvb2JzZXJ2YWJsZS1hcnJheVwiKTtcbmltcG9ydCBPYnNlcnZhYmxlQXJyYXkgPSBvYnNlcnZhYmxlQXJyYXlNb2R1bGUuT2JzZXJ2YWJsZUFycmF5O1xuaW1wb3J0IHBhZ2VzID0gcmVxdWlyZShcInVpL3BhZ2VcIik7XG5pbXBvcnQgYXBwU2V0dGluZ3MgPSByZXF1aXJlKFwiYXBwbGljYXRpb24tc2V0dGluZ3NcIik7XG5cbmxldCBwYWdlOiBwYWdlcy5QYWdlO1xubGV0IHBheVNldHRpbmdzVk0gOiBPYnNlcnZhYmxlID0gb2JzZXJ2YWJsTW9kdWxlLmZyb21PYmplY3QodXNlclBheVNldHRpbmdzKTtcbmxldCBwYXlGcmVxdWVuY3lPcHRpb25zIDogT2JzZXJ2YWJsZUFycmF5PHN0cmluZz4gPSBuZXcgT2JzZXJ2YWJsZUFycmF5PHN0cmluZz4oKTtcblxudmFyIGZyYW1lTW9kdWxlID0gcmVxdWlyZShcInVpL2ZyYW1lXCIpO1xudmFyIHZpZXdNb2RlbDogb2JzZXJ2YWJsTW9kdWxlLk9ic2VydmFibGU7XG5cbmVudW0gUGF5RnJlcXVlbmN5RW51bXtcbiAgICBNT05USExZLFxuICAgIFdFRUtMWVxufVxuXG5pbnRlcmZhY2UgUGF5U2V0dGluZ3NWTSB7XG4gICAgaW5jb21lOiBudW1iZXI7XG4gICAgcGF5RnJlcXVlbmN5IDogc3RyaW5nO1xufVxuXG52YXIgdXNlclBheVNldHRpbmdzOiBQYXlTZXR0aW5nc1ZNID0ge1xuICAgIGluY29tZTogYXBwU2V0dGluZ3MuZ2V0TnVtYmVyKFwiaW5jb21lXCIsIDApLFxuICAgIHBheUZyZXF1ZW5jeSA6IGFwcFNldHRpbmdzLmdldFN0cmluZyhcInBheUZyZXF1ZW5jeVwiLCBQYXlGcmVxdWVuY3lFbnVtW1BheUZyZXF1ZW5jeUVudW0uTU9OVEhMWV0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWdlTG9hZGVkKGFyZ3M6IG9ic2VydmFibE1vZHVsZS5FdmVudERhdGEpIHtcbiAgICBwYWdlID0gPHBhZ2VzLlBhZ2U+YXJncy5vYmplY3Q7XG4gICAgXG4gICAgZm9yICh2YXIgaXRlbSBpbiBwYXlGcmVxdWVuY3lPcHRpb25zKSB7XG4gICAgICAgIHBheUZyZXF1ZW5jeU9wdGlvbnMucG9wKCk7XG4gICAgfVxuICAgIFxuICAgIHBheUZyZXF1ZW5jeU9wdGlvbnMucHVzaChQYXlGcmVxdWVuY3lFbnVtW1BheUZyZXF1ZW5jeUVudW0uTU9OVEhMWV0pO1xuXG4gICAgcGF5RnJlcXVlbmN5T3B0aW9ucy5wdXNoKFBheUZyZXF1ZW5jeUVudW1bUGF5RnJlcXVlbmN5RW51bS5XRUVLTFldKTtcbiAgICBcbiAgICBwYXlTZXR0aW5nc1ZNLnNldChcInBheUZyZXF1ZW5jeU9wdGlvbnNcIiwgcGF5RnJlcXVlbmN5T3B0aW9ucyk7XG4gICAgcGF5U2V0dGluZ3NWTS5zZXQoXCJwYXlGcmVxdWVuY3lJbmRleFwiLCBhcHBTZXR0aW5ncy5nZXROdW1iZXIoXCJwYXlGcmVxdWVuY3lJbmRleFwiLCAwKSk7XG4gICAgXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHBheVNldHRpbmdzVk07XG59XG5cbi8vU2F2ZXMgdGhlIGluY29tZXMgb24gY2hhbmdlLiBEb2VzIG5vdCBoYW5kbGUgZHJvcGRvd25zLlxucGF5U2V0dGluZ3NWTS5hZGRFdmVudExpc3RlbmVyKE9ic2VydmFibGUucHJvcGVydHlDaGFuZ2VFdmVudCwgZnVuY3Rpb24ocGNkOiBQcm9wZXJ0eUNoYW5nZURhdGEpIHtcbi8vICAgIGNvbnNvbGUubG9nKHBjZC5ldmVudE5hbWUudG9TdHJpbmcoKSArIFwiIFwiICsgcGNkLnByb3BlcnR5TmFtZS50b1N0cmluZygpICsgXCIgXCIgKyBwY2QudmFsdWUudG9TdHJpbmcoKSk7XG4gICAgaWYgKHBjZC5wcm9wZXJ0eU5hbWUudG9TdHJpbmcoKSA9PSBcImluY29tZVwiICYmIHBjZC52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHBjZC52YWx1ZSAhPT0gXCJcIikge1xuICAgICAgICBhcHBTZXR0aW5ncy5zZXROdW1iZXIoXCJpbmNvbWVcIiwgcGFyc2VGbG9hdChwY2QudmFsdWUpKTtcbiAgICB9XG4gICAgXG59KTtcblxuZnVuY3Rpb24gcHJpbnREYXRlKCl7XG4gICAgY29uc29sZS5sb2coXCJEYXRlIGJveCBoYXMgYmVlbiBjbG9zZWRcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93RGF0ZSgpe1xuICAgIHZhciBtb2RhbFBhZ2VNb2R1bGUgPSBcInZpZXdzL3BheS1zZXR0aW5ncy9zaW1wbGUtbW9kYWxcIjtcbiAgICB2YXIgY29udGV4dCA9IFwic29tZSBjdXN0b20gY29udGV4dFwiO1xuICAgIHZhciBmdWxsc2NyZWVuID0gdHJ1ZTtcbiAgICBwYWdlLnNob3dNb2RhbChtb2RhbFBhZ2VNb2R1bGUsIGNvbnRleHQsIGZ1bmN0aW9uIGNsb3NlQ2FsbGJhY2sgKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkZ1Y2tpbmcgd29yayEhIVwiKTtcbiAgICB9KTtcbi8vICAgIHZhciBtb2R1bGVOYW1lID0gXCIuL2RhdGUtcGlja2VyLGNvbXBvbmVudFwiXG4vLyAgICBwYWdlLnNob3dNb2RhbChtb2R1bGVOYW1lLCBcIlJhbmRvIGNvbnRleHRcIiwgcHJpbnREYXRlLCBmYWxzZSk7XG59XG5cbi8vIFVwZGF0ZXMgdGhlIHZpZXcgbW9kZWxzIGZvciBwYXlmcmVxdWVuY3kuXG5leHBvcnQgZnVuY3Rpb24gcGF5RnJlcXVlbmN5Q2hhbmdlKGFyZ3M6IFNlbGVjdGVkSW5kZXhDaGFuZ2VkRXZlbnREYXRhKSB7XG4gICAgbGV0IG5ld1BheUZyZXF1ZW5jeSA6IHN0cmluZyA9IHBheUZyZXF1ZW5jeU9wdGlvbnMuZ2V0SXRlbShhcmdzLm5ld0luZGV4KS50b1N0cmluZygpO1xuICAgIHBheVNldHRpbmdzVk0uc2V0KFwicGF5RnJlcXVlbmN5XCIsIG5ld1BheUZyZXF1ZW5jeSk7XG4gICAgLy8gVE9ETzogTWFrZSBhIGNsYXNzIHRoYXQgc2F2ZXMgYW4gb2JqZWN0IHRvIHRoZSBhcHAgc2V0dGluZ3MuIFNhdmVzIHRoZSBib3RoZXIgb2YgaGF2aW5nIHRvIGlmIHN0YXRlbWVudCB3aGVuIGEgdmFsdWUgY2hhbmdlcy4gQ2FuIHVzZSByZWZsZWN0aW9uIGZvciB0aGlzLlxuICAgIGFwcFNldHRpbmdzLnNldFN0cmluZyhcInBheUZyZXF1bmN5XCIsIG5ld1BheUZyZXF1ZW5jeSk7XG4gICAgYXBwU2V0dGluZ3Muc2V0TnVtYmVyKFwicGF5RnJlcXVlbmN5SW5kZXhcIixhcmdzLm5ld0luZGV4KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBheVNldHRpbmdzKCkge1xuICAgIHZhciB0b3Btb3N0ID0gZnJhbWVNb2R1bGUudG9wbW9zdCgpO1xuICAgIHRvcG1vc3QubmF2aWdhdGUoXCJ2aWV3cy9zZXR0aW5ncy9wYXktc2V0dGluZ3NcIikgICAgXG59Il19